/**
 * @fileoverview added by tsickle
 * Generated from: src/material/icon/testing/fake-icon-registry.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, NgModule } from '@angular/core';
import { MatIconRegistry } from '@angular/material/icon';
import { of as observableOf } from 'rxjs';
// tslint:enable:no-any
/**
 * A null icon registry that must be imported to allow disabling of custom
 * icons.
 */
import * as ɵngcc0 from '@angular/core';
export class FakeMatIconRegistry {
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIcon() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconLiteral() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconInNamespace() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconLiteralInNamespace() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconSet() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconSetLiteral() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconSetInNamespace() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconSetLiteralInNamespace() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    registerFontClassAlias() {
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} alias
     * @return {?}
     */
    classNameForFontAlias(alias) {
        return alias;
    }
    /**
     * @return {?}
     */
    getDefaultFontSetClass() {
        return 'material-icons';
    }
    /**
     * @return {?}
     */
    getSvgIconFromUrl() {
        return observableOf(this._generateEmptySvg());
    }
    /**
     * @return {?}
     */
    getNamedSvgIcon() {
        return observableOf(this._generateEmptySvg());
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    setDefaultFontSetClass() {
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @private
     * @return {?}
     */
    _generateEmptySvg() {
        /** @type {?} */
        const emptySvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        emptySvg.classList.add('fake-testing-svg');
        // Emulate real icon characteristics from `MatIconRegistry` so size remains consistent in tests.
        emptySvg.setAttribute('fit', '');
        emptySvg.setAttribute('height', '100%');
        emptySvg.setAttribute('width', '100%');
        emptySvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        emptySvg.setAttribute('focusable', 'false');
        return emptySvg;
    }
}
FakeMatIconRegistry.ɵfac = function FakeMatIconRegistry_Factory(t) { return new (t || FakeMatIconRegistry)(); };
FakeMatIconRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FakeMatIconRegistry, factory: FakeMatIconRegistry.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FakeMatIconRegistry, [{
        type: Injectable
    }], null, null); })();
/**
 * Import this module in tests to install the null icon registry.
 */
export class MatIconTestingModule {
}
MatIconTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconTestingModule });
MatIconTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconTestingModule_Factory(t) { return new (t || MatIconTestingModule)(); }, providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconTestingModule, [{
        type: NgModule,
        args: [{
                providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFrZS1pY29uLXJlZ2lzdHJ5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWF0ZXJpYWwvaWNvbi90ZXN0aW5nL2Zha2UtaWNvbi1yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUFhLEVBQUUsSUFBSSxZQUFZLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDcEQ7QUFDdUI7QUFBSTtBQUVKO0FBQVU7O0FBU2pDLE1BQU0sT0FBTyxtQkFBbUI7QUFBRztBQUFRO0FBQXNCO0FBQ2hFO0FBQ0Q7QUFBUSxJQUROLFVBQVU7QUFBSyxRQUNiLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7QUFDaEIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUFzQjtBQUUzQjtBQUVpQjtBQUFRLElBSnpCLGlCQUFpQjtBQUFLLFFBQ3BCLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7QUFDaEIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUFzQjtBQUNkO0FBR0E7QUFBUSxJQUpyQixxQkFBcUI7QUFBSyxRQUN4QixPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBc0I7QUFDckI7QUFHQTtBQUFRLElBSmQsNEJBQTRCO0FBQUssUUFDL0IsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztBQUNoQixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQ0o7QUFHRjtBQUFzQjtBQUFRLElBSjdCLGFBQWE7QUFBSyxRQUNoQixPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBc0I7QUFDYjtBQUdBO0FBQVEsSUFKdEIsb0JBQW9CO0FBQUssUUFDdkIsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztBQUNoQixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXNCO0FBQ2pCO0FBR0E7QUFBUSxJQUpsQix3QkFBd0I7QUFBSyxRQUMzQixPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBc0I7QUFDeEI7QUFHQTtBQUFRLElBSlgsK0JBQStCO0FBQUssUUFDbEMsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztBQUNoQixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXNCO0FBQ2Y7QUFHQTtBQUFRLElBSnBCLHNCQUFzQjtBQUFLLFFBQ3pCLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7QUFDaEIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUM5QjtBQUFRLElBRFAscUJBQXFCLENBQUMsS0FBYTtBQUFJLFFBQ3JDLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBbUI7QUFDckIsSUFESCxzQkFBc0I7QUFDeEIsUUFBSSxPQUFPLGdCQUFnQixDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBbUI7QUFBUSxJQUFoQyxpQkFBaUI7QUFBSyxRQUNwQixPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELElBQUUsQ0FBQztBQUNIO0FBQ087QUFBbUI7QUFBUSxJQUFoQyxlQUFlO0FBQUssUUFDbEIsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXNCO0FBQ2Y7QUFHQTtBQUViLElBTkMsc0JBQXNCO0FBQUssUUFDekIsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztBQUNoQixJQUFFLENBQUM7QUFDSDtBQUNPO0FBRUY7QUFBUSxJQUZYLFdBQVcsS0FBSyxDQUFDO0FBQ25CO0FBQ087QUFBZ0I7QUFBbUI7QUFDcEMsSUFESSxpQkFBaUI7QUFBSztBQUNuQixjQUFILFFBQVEsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQztBQUNsRixRQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDL0MsUUFBSSxnR0FBZ0c7QUFDcEcsUUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNyQyxRQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLFFBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDM0MsUUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ2xFLFFBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEQsUUFBSSxPQUFPLFFBQVEsQ0FBQztBQUNwQixJQUFFLENBQUM7QUFDSDsrQ0F2RUMsVUFBVTs7OzswQkFDVDtBQUFDO0FBQUk7QUFBa0U7QUE0RXpFLE1BQU0sT0FBTyxvQkFBb0I7QUFDakM7Z0RBSkMsUUFBUSxTQUFDLGtCQUNSO09BQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUMsQ0FBQyxjQUN2RTs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3RhYmxlLCBOZ01vZHVsZSwgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TWF0SWNvblJlZ2lzdHJ5fSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2YgYXMgb2JzZXJ2YWJsZU9mfSBmcm9tICdyeGpzJztcblxuLy8gdHNsaW50OmRpc2FibGU6bm8tYW55IEltcG9zc2libGUgdG8gdGVsbCBwYXJhbSB0eXBlcy5cbnR5cGUgUHVibGljQXBpPFQ+ID0ge1xuICBbSyBpbiBrZXlvZiBUXTogVFtLXSBleHRlbmRzICguLi54OiBhbnlbXSkgPT4gVCA/ICguLi54OiBhbnlbXSkgPT4gUHVibGljQXBpPFQ+IDogVFtLXVxufTtcbi8vIHRzbGludDplbmFibGU6bm8tYW55XG5cbi8qKlxuICogQSBudWxsIGljb24gcmVnaXN0cnkgdGhhdCBtdXN0IGJlIGltcG9ydGVkIHRvIGFsbG93IGRpc2FibGluZyBvZiBjdXN0b21cbiAqIGljb25zLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmFrZU1hdEljb25SZWdpc3RyeSBpbXBsZW1lbnRzIFB1YmxpY0FwaTxNYXRJY29uUmVnaXN0cnk+LCBPbkRlc3Ryb3kge1xuICBhZGRTdmdJY29uKCk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkU3ZnSWNvbkxpdGVyYWwoKTogdGhpcyB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRTdmdJY29uSW5OYW1lc3BhY2UoKTogdGhpcyB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRTdmdJY29uTGl0ZXJhbEluTmFtZXNwYWNlKCk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkU3ZnSWNvblNldCgpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFN2Z0ljb25TZXRMaXRlcmFsKCk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkU3ZnSWNvblNldEluTmFtZXNwYWNlKCk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkU3ZnSWNvblNldExpdGVyYWxJbk5hbWVzcGFjZSgpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlZ2lzdGVyRm9udENsYXNzQWxpYXMoKTogdGhpcyB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjbGFzc05hbWVGb3JGb250QWxpYXMoYWxpYXM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGFsaWFzO1xuICB9XG5cbiAgZ2V0RGVmYXVsdEZvbnRTZXRDbGFzcygpIHtcbiAgICByZXR1cm4gJ21hdGVyaWFsLWljb25zJztcbiAgfVxuXG4gIGdldFN2Z0ljb25Gcm9tVXJsKCk6IE9ic2VydmFibGU8U1ZHRWxlbWVudD4ge1xuICAgIHJldHVybiBvYnNlcnZhYmxlT2YodGhpcy5fZ2VuZXJhdGVFbXB0eVN2ZygpKTtcbiAgfVxuXG4gIGdldE5hbWVkU3ZnSWNvbigpOiBPYnNlcnZhYmxlPFNWR0VsZW1lbnQ+IHtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZU9mKHRoaXMuX2dlbmVyYXRlRW1wdHlTdmcoKSk7XG4gIH1cblxuICBzZXREZWZhdWx0Rm9udFNldENsYXNzKCk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7IH1cblxuICBwcml2YXRlIF9nZW5lcmF0ZUVtcHR5U3ZnKCk6IFNWR0VsZW1lbnQge1xuICAgIGNvbnN0IGVtcHR5U3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICBlbXB0eVN2Zy5jbGFzc0xpc3QuYWRkKCdmYWtlLXRlc3Rpbmctc3ZnJyk7XG4gICAgLy8gRW11bGF0ZSByZWFsIGljb24gY2hhcmFjdGVyaXN0aWNzIGZyb20gYE1hdEljb25SZWdpc3RyeWAgc28gc2l6ZSByZW1haW5zIGNvbnNpc3RlbnQgaW4gdGVzdHMuXG4gICAgZW1wdHlTdmcuc2V0QXR0cmlidXRlKCdmaXQnLCAnJyk7XG4gICAgZW1wdHlTdmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMTAwJScpO1xuICAgIGVtcHR5U3ZnLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMTAwJScpO1xuICAgIGVtcHR5U3ZnLnNldEF0dHJpYnV0ZSgncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWlkWU1pZCBtZWV0Jyk7XG4gICAgZW1wdHlTdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTtcbiAgICByZXR1cm4gZW1wdHlTdmc7XG4gIH1cbn1cblxuLyoqIEltcG9ydCB0aGlzIG1vZHVsZSBpbiB0ZXN0cyB0byBpbnN0YWxsIHRoZSBudWxsIGljb24gcmVnaXN0cnkuICovXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogTWF0SWNvblJlZ2lzdHJ5LCB1c2VDbGFzczogRmFrZU1hdEljb25SZWdpc3RyeX1dXG59KVxuZXhwb3J0IGNsYXNzIE1hdEljb25UZXN0aW5nTW9kdWxlIHtcbn1cbiJdfQ==